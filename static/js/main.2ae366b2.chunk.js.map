{"version":3,"sources":["components/Post.js","components/Reddit.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","state","post","data","style","borderBottom","padding","color","textDecoration","href","this","permalink","author","title","width","src","url","alt","num_comments","React","Component","Reddit","subreddit","postCount","setState","fetch","then","res","json","jsonData","children","background","listStyleType","maxWidth","margin","textAlign","map","key","id","onChangeHandler","e","setFxn","keyCode","target","value","EnhancedReddit","position","height","float","cursor","type","name","onKeyUp","setSubreddit","placeholder","onChangeCapture","onChange","setPostCount","App","count","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ae366b2.chunk.js","sourcesContent":["import React from 'react'\n\nclass Post extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            post: props.post.data\n        }\n    }\n\n    render(){\n        return (\n            <div style={{borderBottom: \"1px solid grey\", padding:\"1em\"}}>\n                <a style={{color:\"grey\", textDecoration:'none'}} href={\"https://www.reddit.com/\"+this.state.post.permalink}>\n                    <span>Posted By u/{this.state.post.author}</span>\n                    <h3>{this.state.post.title}</h3>\n                    <img width=\"100%\" src={this.state.post.url} alt={this.state.post.title} />\n                    <p>{this.state.post.num_comments} Comments</p>\n                </a>\n            </div>\n        )\n    }\n}\n\nexport default Post","import React from 'react'\n\nimport Post from './Post'\n\nclass Reddit extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            data: [],\n            subreddit: props.subreddit,\n            postCount: props.postCount\n        }\n    }\n\n    componentDidUpdate(){\n        if(this.props.subreddit !== this.state.subreddit){\n            this.setState({\n                subreddit: this.props.subreddit\n            });\n\n            fetch(\"https://www.reddit.com/r/\"+this.props.subreddit+\".json?q=oop&limit=\"+this.state.postCount).then(res => res.json()).then(jsonData => {\n                this.setState({\n                    data: jsonData.data? jsonData.data.children : [],\n                })\n            })\n        }\n        if(this.props.postCount !== this.state.postCount){\n            this.setState({\n                postCount: this.props.postCount\n            });\n\n            fetch(\"https://www.reddit.com/r/\"+this.props.subreddit+\".json?q=oop&limit=\"+this.props.postCount).then(res => res.json()).then(jsonData => {\n                this.setState({\n                    data: jsonData.data? jsonData.data.children : [],\n                })\n            })\n        }\n    }\n    componentDidMount(){\n        \n        fetch(\"https://www.reddit.com/r/\"+this.state.subreddit+\".json?q=oop&limit=\"+this.state.postCount).then(res => res.json()).then(jsonData => {\n            this.setState({\n                data: jsonData.data.children,\n            })\n        })\n    }\n    \n    render(){\n\n        return (\n            <div style={{background: \"rgb(218,224,230)\", padding:\"2em\"}}>\n                <ul style={{listStyleType: 'none', maxWidth:\"960px\", margin:\"2.5em auto\", background:\"white\", padding:\"2.5em\"}}>\n                    <h3 style={{textAlign: \"center\", color: \"grey\", margin:\"1.5em auto\"}}>r/{this.state.subreddit}</h3>\n\n                    {this.state.data.map( post => {\n                        return <li key={post.data.id}><Post post={post} /></li>\n                    })}\n                </ul>\n\n            </div>\n        ) \n    }\n}\n\n\nexport default Reddit","import React from 'react';\n\nimport './App.css';\n\nimport Reddit from './components/Reddit'\n\nfunction withHeader(Component){\n  return function(props){\n    return (\n      <div>\n        <header style={{position: \"fixed\", background:\"white\", width: \"100%\", padding:\"0.5em\"}}>\n          <div style={{width:\"80%\", margin: \"0px auto\", height: \"2.25em\"}}>\n            <a href=\"/\"  style={{textDecoration:\"none\"}}>\n              <img height=\"100%\" src=\"./images/2hEsLbAZ-eaoVJ-zZOqEz8DWCtnDgMR88TmJ-mxWoTc.png\" alt=\"Reddit\"/> <span style={{color: \"rgb(254,69,0)\", padding: \"10px\"}}>Reddit Image Board</span>\n            </a>\n            <div style={{margin:\"0.5em\", float:\"right\", color: \"grey\"}}>\n              \n              \n              <label style={{margin: \"0px 5px 0px 25px\"}}>r/</label>\n              <input  style={{ width: \"25em\", color: \"blue\" ,padding: \"4px\", background:\"white\", cursor: \"pointer\"}}  type=\"text\" name=\"subreddit\"  onKeyUp={(e)=>onChangeHandler(e,props.setSubreddit)} placeholder=\"Search subreddit\" />\n\n              <label style={{margin: \"0px 5px 0px 25px\"}}>Popular subreddits: </label>\n              <select style={{ width: \"10em\", color: \"blue\" ,padding: \"4px\", background:\"white\", cursor: \"pointer\"}} onChangeCapture={(e)=>onChangeHandler(e,props.setSubreddit)}>\n                <option>wallpapers</option>\n                <option>wallpaper</option>\n                <option>memes</option>\n                <option>pics</option>\n                <option>comics</option>\n              </select>\n              <label style={{margin: \"0px 5px 0px 25px\"}}>Post Count: </label>\n              <input style={{width: \"5em\"}} onChange={(e)=>onChangeHandler(e,props.setPostCount)} type=\"number\" value={props.postCount}/>\n            </div>\n          </div>\n        </header>\n        <Component {...props} />\n      </div>\n    )\n  }\n}\n\nconst onChangeHandler =(e, setFxn)=>{\n\n  if(!e.keyCode || e.keyCode === 13)\n    setFxn(e.target.value)\n}\n\nconst EnhancedReddit = withHeader(Reddit);\n\nclass App extends React.Component {\n\n  constructor(){\n    super()\n\n    this.state= {\n      subreddit: 'wallpapers',\n      postCount: 10\n    }\n  }\n\n  render(){\n    \n    return (\n      <div>\n        <EnhancedReddit subreddit={this.state.subreddit} setSubreddit={this.setSubreddit} postCount={this.state.postCount} setPostCount={this.setPostCount}/>\n      </div>\n    );\n  }\n\n  setSubreddit = (subreddit) => {\n    this.setState({\n      subreddit: subreddit\n    });\n  }\n\n  setPostCount = (count) => {\n    this.setState({\n      postCount: count\n    });\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}